<!-- This file is part of the Async/Await Demo Project, which is released under MIT License.
     See LICENSE.md or visit:
     https://github.com/michaelpduda/AsyncAwaitDemo/blob/master/LICENSE.md
     -->
<Window x:Class="AsyncAwaitDemo.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        mc:Ignorable="d"
        Title="Async/Await Demo Application"
        Height="700"
        Width="800"
        WindowStartupLocation="CenterScreen">
    <Window.Resources>
        <Style TargetType="Ellipse">
            <Setter Property="Margin"
                    Value="10" />
            <Setter Property="Height"
                    Value="75" />
            <Setter Property="Width"
                    Value="{Binding Height, RelativeSource={RelativeSource Self}}" />
            <Setter Property="Stroke"
                    Value="Black" />
            <Setter Property="StrokeThickness"
                    Value="3" />
        </Style>
        <Style TargetType="Button">
            <Setter Property="Margin"
                    Value="10" />
        </Style>
        <Style TargetType="TextBlock">
            <Setter Property="TextAlignment"
                    Value="Center" />
        </Style>
    </Window.Resources>
    <DockPanel Margin="10">
        <StackPanel DockPanel.Dock="Top"
                    Orientation="Horizontal"
                    HorizontalAlignment="Center">
            <Ellipse RenderTransformOrigin="0.5 0.5">
                <Ellipse.Fill>
                    <LinearGradientBrush>
                        <GradientStop Color="Red"
                                      Offset="0.0"  />
                        <GradientStop Color="Red"
                                      Offset="0.5"  />
                        <GradientStop Color="Blue"
                                      Offset="0.5" />
                        <GradientStop Color="Blue"
                                      Offset="1.0" />
                    </LinearGradientBrush>
                </Ellipse.Fill>
                <Ellipse.RenderTransform>
                    <RotateTransform x:Name="noFreeze" />
                </Ellipse.RenderTransform>
                <Ellipse.Triggers>
                    <EventTrigger RoutedEvent="Loaded">
                        <BeginStoryboard>
                            <Storyboard>
                                <DoubleAnimation Storyboard.TargetProperty="(Rectangle.RenderTransform).(RotateTransform.Angle)"
                                                 To="-360"
                                                 Duration="0:0:1"
                                                 RepeatBehavior="Forever" />
                            </Storyboard>
                        </BeginStoryboard>
                    </EventTrigger>
                </Ellipse.Triggers>
            </Ellipse>
            <Ellipse x:Name="Light1" />
            <Ellipse x:Name="Light2" />
            <Ellipse x:Name="Light3" />
        </StackPanel>
        <UniformGrid x:Name="MainGrid"
                     Columns="4">
            <Button Click="Demo_01_Click">
                <TextBlock>01 No Async<LineBreak />Will Block UI Thread<LineBreak />Won't Lock UI<LineBreak />Won't Crash</TextBlock>
            </Button>
            <Button Click="Demo_02_Click">
                <TextBlock>02 No Async<LineBreak />Will Block UI Thread<LineBreak />Won't Lock UI<LineBreak />Will Crash</TextBlock>
            </Button>
            <Button Click="Demo_03_Click">
                <TextBlock>03 No Async<LineBreak />Won't Block UI Thread<LineBreak />Won't Lock UI<LineBreak />Will Crash</TextBlock>
            </Button>
            <Button Click="Demo_04_Click">
                <TextBlock>04 No Async<LineBreak />Won't Block UI Thread<LineBreak />Won't Lock UI<LineBreak />Won't Crash</TextBlock>
            </Button>
            <Button Click="Demo_05_Click">
                <TextBlock>05 No Async<LineBreak />Won't Block UI Thread<LineBreak />Will Lock UI<LineBreak />Won't Crash</TextBlock>
            </Button>
            <Button Click="Demo_06_Click">
                <TextBlock>06 Async</TextBlock>
            </Button>
            <Button Click="Demo_07_Click">
                <TextBlock>07 Async<LineBreak />Randomized Times</TextBlock>
            </Button>
            <Button Click="Demo_08_Click">
                <TextBlock>08 Async<LineBreak />Randomized Times Again<LineBreak />Will Crash</TextBlock>
            </Button>
            <Button Click="Demo_09_Click">
                <TextBlock>09 Async<LineBreak />Randomized Times Again<LineBreak />Won't Crash</TextBlock>
            </Button>
            <Button Click="Demo_10_Click">
                <TextBlock>10 Async<LineBreak />Randomized Times Again<LineBreak />Won't Crash</TextBlock>
            </Button>
        </UniformGrid>
    </DockPanel>
</Window>
